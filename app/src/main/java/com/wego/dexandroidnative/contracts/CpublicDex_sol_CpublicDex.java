package com.wego.dexandroidnative.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class CpublicDex_sol_CpublicDex extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_TRADE = "trade";

    public static final String FUNC_ORDER = "order";

    public static final String FUNC_SETSUCCESSOR = "setSuccessor";

    public static final String FUNC_ORDERFILLS = "orderFills";

    public static final String FUNC_CANCELORDER = "cancelOrder";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_DEPOSITTOKEN = "depositToken";

    public static final String FUNC_DEPOSITTOKENFORUSER = "depositTokenForUser";

    public static final String FUNC_TOKENS = "tokens";

    public static final String FUNC_MIGRATEFUNDS = "migrateFunds";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_DEPOSITFORUSER = "depositForUser";

    public static final String FUNC_TESTTRADE = "testTrade";

    public static final String FUNC_SUCCESSOR = "successor";

    public static final String FUNC_CHANGEFEEACCOUNT = "changeFeeAccount";

    public static final String FUNC_CHANGEFEETAKE = "changeFeeTake";

    public static final String FUNC_CHANGEADMIN = "changeAdmin";

    public static final String FUNC_WITHDRAWTOKEN = "withdrawToken";

    public static final String FUNC_CHANGEFREEUNTILDATE = "changeFreeUntilDate";

    public static final String FUNC_PREDECESSOR = "predecessor";

    public static final String FUNC_ORDERS = "orders";

    public static final String FUNC_FEETAKE = "feeTake";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_FREEUNTILDATE = "freeUntilDate";

    public static final String FUNC_AVAILABLEVOLUME = "availableVolume";

    public static final Event ORDER_EVENT = new Event("Order", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CANCEL_EVENT = new Event("Cancel", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event TRADE_EVENT = new Event("Trade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDSMIGRATED_EVENT = new Event("FundsMigrated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CpublicDex_sol_CpublicDex(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CpublicDex_sol_CpublicDex(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CpublicDex_sol_CpublicDex(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CpublicDex_sol_CpublicDex(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> trade(String tokenGet, BigInteger amountGet, String tokenGive, BigInteger amountGive, BigInteger expires, BigInteger nonce, String user, BigInteger v, byte[] r, byte[] s, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGet), 
                new org.web3j.abi.datatypes.Address(tokenGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGive), 
                new org.web3j.abi.datatypes.generated.Uint256(expires), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> order(String tokenGet, BigInteger amountGet, String tokenGive, BigInteger amountGive, BigInteger expires, BigInteger nonce) {
        final Function function = new Function(
                FUNC_ORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGet), 
                new org.web3j.abi.datatypes.Address(tokenGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGive), 
                new org.web3j.abi.datatypes.generated.Uint256(expires), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSuccessor(String successor_) {
        final Function function = new Function(
                FUNC_SETSUCCESSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(successor_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> orderFills(String param0, byte[] param1) {
        final Function function = new Function(FUNC_ORDERFILLS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Bytes32(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> cancelOrder(String tokenGet, BigInteger amountGet, String tokenGive, BigInteger amountGive, BigInteger expires, BigInteger nonce, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(
                FUNC_CANCELORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGet), 
                new org.web3j.abi.datatypes.Address(tokenGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGive), 
                new org.web3j.abi.datatypes.generated.Uint256(expires), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> depositToken(String token, BigInteger amount) {
        final Function function = new Function(
                FUNC_DEPOSITTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> depositTokenForUser(String token, BigInteger amount, String user) {
        final Function function = new Function(
                FUNC_DEPOSITTOKENFORUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokens(String param0, String param1) {
        final Function function = new Function(FUNC_TOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> migrateFunds(String newContract, List<String> tokens_) {
        final Function function = new Function(
                FUNC_MIGRATEFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newContract), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(tokens_, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> version() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> depositForUser(String user, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITFORUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Boolean> testTrade(String tokenGet, BigInteger amountGet, String tokenGive, BigInteger amountGive, BigInteger expires, BigInteger nonce, String user, BigInteger v, byte[] r, byte[] s, BigInteger amount, String sender) {
        final Function function = new Function(FUNC_TESTTRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGet), 
                new org.web3j.abi.datatypes.Address(tokenGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGive), 
                new org.web3j.abi.datatypes.generated.Uint256(expires), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(sender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> successor() {
        final Function function = new Function(FUNC_SUCCESSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeFeeAccount(String feeAccount_) {
        final Function function = new Function(
                FUNC_CHANGEFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(feeAccount_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeFeeTake(BigInteger feeTake_) {
        final Function function = new Function(
                FUNC_CHANGEFEETAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(feeTake_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeAdmin(String admin_) {
        final Function function = new Function(
                FUNC_CHANGEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawToken(String token, BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeFreeUntilDate(BigInteger freeUntilDate_) {
        final Function function = new Function(
                FUNC_CHANGEFREEUNTILDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(freeUntilDate_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> predecessor() {
        final Function function = new Function(FUNC_PREDECESSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> orders(String param0, byte[] param1) {
        final Function function = new Function(FUNC_ORDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Bytes32(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> feeTake() {
        final Function function = new Function(FUNC_FEETAKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> balanceOf(String token, String user) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> freeUntilDate() {
        final Function function = new Function(FUNC_FREEUNTILDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> availableVolume(String tokenGet, BigInteger amountGet, String tokenGive, BigInteger amountGive, BigInteger expires, BigInteger nonce, String user, BigInteger v, byte[] r, byte[] s) {
        final Function function = new Function(FUNC_AVAILABLEVOLUME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(tokenGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGet), 
                new org.web3j.abi.datatypes.Address(tokenGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountGive), 
                new org.web3j.abi.datatypes.generated.Uint256(expires), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<OrderEventResponse> getOrderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORDER_EVENT, transactionReceipt);
        ArrayList<OrderEventResponse> responses = new ArrayList<OrderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderEventResponse typedResponse = new OrderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.expires = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderEventResponse> orderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderEventResponse>() {
            @Override
            public OrderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORDER_EVENT, log);
                OrderEventResponse typedResponse = new OrderEventResponse();
                typedResponse.log = log;
                typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.expires = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderEventResponse> orderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDER_EVENT));
        return orderEventFlowable(filter);
    }

    public List<CancelEventResponse> getCancelEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANCEL_EVENT, transactionReceipt);
        ArrayList<CancelEventResponse> responses = new ArrayList<CancelEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CancelEventResponse typedResponse = new CancelEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.expires = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.v = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.r = (byte[]) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.s = (byte[]) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CancelEventResponse> cancelEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CancelEventResponse>() {
            @Override
            public CancelEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANCEL_EVENT, log);
                CancelEventResponse typedResponse = new CancelEventResponse();
                typedResponse.log = log;
                typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.expires = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.nonce = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.v = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.r = (byte[]) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.s = (byte[]) eventValues.getNonIndexedValues().get(9).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CancelEventResponse> cancelEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANCEL_EVENT));
        return cancelEventFlowable(filter);
    }

    public List<TradeEventResponse> getTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRADE_EVENT, transactionReceipt);
        ArrayList<TradeEventResponse> responses = new ArrayList<TradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradeEventResponse typedResponse = new TradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.get = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.give = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TradeEventResponse> tradeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TradeEventResponse>() {
            @Override
            public TradeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRADE_EVENT, log);
                TradeEventResponse typedResponse = new TradeEventResponse();
                typedResponse.log = log;
                typedResponse.tokenGet = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountGet = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenGive = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.amountGive = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.get = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.give = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TradeEventResponse> tradeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADE_EVENT));
        return tradeEventFlowable(filter);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public List<FundsMigratedEventResponse> getFundsMigratedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDSMIGRATED_EVENT, transactionReceipt);
        ArrayList<FundsMigratedEventResponse> responses = new ArrayList<FundsMigratedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundsMigratedEventResponse typedResponse = new FundsMigratedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundsMigratedEventResponse> fundsMigratedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundsMigratedEventResponse>() {
            @Override
            public FundsMigratedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDSMIGRATED_EVENT, log);
                FundsMigratedEventResponse typedResponse = new FundsMigratedEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundsMigratedEventResponse> fundsMigratedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDSMIGRATED_EVENT));
        return fundsMigratedEventFlowable(filter);
    }

    @Deprecated
    public static CpublicDex_sol_CpublicDex load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CpublicDex_sol_CpublicDex(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CpublicDex_sol_CpublicDex load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CpublicDex_sol_CpublicDex(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CpublicDex_sol_CpublicDex load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CpublicDex_sol_CpublicDex(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CpublicDex_sol_CpublicDex load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CpublicDex_sol_CpublicDex(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CpublicDex_sol_CpublicDex> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String admin_, String feeAccount_, BigInteger feeTake_, BigInteger freeUntilDate_, String predecessor_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_), 
                new org.web3j.abi.datatypes.Address(feeAccount_), 
                new org.web3j.abi.datatypes.generated.Uint256(feeTake_), 
                new org.web3j.abi.datatypes.generated.Uint256(freeUntilDate_), 
                new org.web3j.abi.datatypes.Address(predecessor_)));
        return deployRemoteCall(CpublicDex_sol_CpublicDex.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CpublicDex_sol_CpublicDex> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String admin_, String feeAccount_, BigInteger feeTake_, BigInteger freeUntilDate_, String predecessor_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_), 
                new org.web3j.abi.datatypes.Address(feeAccount_), 
                new org.web3j.abi.datatypes.generated.Uint256(feeTake_), 
                new org.web3j.abi.datatypes.generated.Uint256(freeUntilDate_), 
                new org.web3j.abi.datatypes.Address(predecessor_)));
        return deployRemoteCall(CpublicDex_sol_CpublicDex.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CpublicDex_sol_CpublicDex> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String admin_, String feeAccount_, BigInteger feeTake_, BigInteger freeUntilDate_, String predecessor_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_), 
                new org.web3j.abi.datatypes.Address(feeAccount_), 
                new org.web3j.abi.datatypes.generated.Uint256(feeTake_), 
                new org.web3j.abi.datatypes.generated.Uint256(freeUntilDate_), 
                new org.web3j.abi.datatypes.Address(predecessor_)));
        return deployRemoteCall(CpublicDex_sol_CpublicDex.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CpublicDex_sol_CpublicDex> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String admin_, String feeAccount_, BigInteger feeTake_, BigInteger freeUntilDate_, String predecessor_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(admin_), 
                new org.web3j.abi.datatypes.Address(feeAccount_), 
                new org.web3j.abi.datatypes.generated.Uint256(feeTake_), 
                new org.web3j.abi.datatypes.generated.Uint256(freeUntilDate_), 
                new org.web3j.abi.datatypes.Address(predecessor_)));
        return deployRemoteCall(CpublicDex_sol_CpublicDex.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OrderEventResponse {
        public Log log;

        public String tokenGet;

        public BigInteger amountGet;

        public String tokenGive;

        public BigInteger amountGive;

        public BigInteger expires;

        public BigInteger nonce;

        public String user;
    }

    public static class CancelEventResponse {
        public Log log;

        public String tokenGet;

        public BigInteger amountGet;

        public String tokenGive;

        public BigInteger amountGive;

        public BigInteger expires;

        public BigInteger nonce;

        public String user;

        public BigInteger v;

        public byte[] r;

        public byte[] s;
    }

    public static class TradeEventResponse {
        public Log log;

        public String tokenGet;

        public BigInteger amountGet;

        public String tokenGive;

        public BigInteger amountGive;

        public String get;

        public String give;
    }

    public static class DepositEventResponse {
        public Log log;

        public String token;

        public String user;

        public BigInteger amount;

        public BigInteger balance;
    }

    public static class WithdrawEventResponse {
        public Log log;

        public String token;

        public String user;

        public BigInteger amount;

        public BigInteger balance;
    }

    public static class FundsMigratedEventResponse {
        public Log log;

        public String user;

        public String newContract;
    }
}
